import os
import pandas as pd
import csv
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

lignes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
colonnes = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']

""" 455 de la plaque AxhVLA250122-18 T MOY 2 """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [953.50,786.00,'nan','nan','nan',2458.33,1779.33,'nan',2594.67,2487.67,'nan','nan','nan',840.00,'nan','nan','nan',2584.67,2578.17,2159.33,'nan','nan','nan','nan',1309.33,'nan',2562.33,2590.50,'nan','nan','nan',934.50,'nan',2524.67,'nan','nan',2590.83,2545.17,'nan','nan',1998.33,'nan','nan','nan','nan','nan',2602.33,2458.17,'nan','nan','nan','nan',1429.50,2150.60,'nan','nan',2573.17,2594.67,'nan','nan','nan','nan','nan','nan','nan','nan','nan',2374.33,'nan','nan','nan',692.33,'nan','nan',2530.67,2587.50,740.17,'nan',837.17,'nan','nan',2508.50,'nan',1859.00,2561.00,2547.00,'nan','nan','nan','nan','nan',693.83,'nan','nan','nan','nan']

""" 730 de la plaque AxhVLA250206-15 T MOY 2 """
# mesures_RSB = np.asarray([62.4,66.6,66.3,78.9,86.4,158.2,99.4,113.4,131.2,141,55.6,61.4,88.4,85.5,79.3,71.3,68.2,150.8,141.7,123.1,101.3,84.3,75.7,68.5,99.7,116.4,135.6,146.8,67.3,76.3,89.6,89.9,95.9,157.9,96.1,104.5,144.9,158.1,136.2,119.5,110.7,100.6,96.6,87.5,72.8,64.4,140.7,126,63,69.4,78.6,85.8,95.8,169.3,113.2,125.6,140,145.7,59.8,61.8,88.7,83.5,77,71,64.9,153.2,135.8,120.1,103.6,88.6,80,69.9,96.2,113.6,133.5,143.2,62.7,72.3,78.5,84.8,89.8,154.5,90.1,90,127.6,155.8,129.1,109.8,95.5,84.7,78.6,72.6,62.7,57.9,135.8,108.9])
# donnees_experimentales = [1828.33,1710.83,1733.83,1289.17,1071,1347,732.33,563.4,636.33,802.67,2055.5,1902,1061.6,1117.8,1406.67,1672.17,1775,1068.33,828.4,546,783.17,1189.33,1493,1703.5,794.83,562.67,669.67,938,1792.17,1535.8,1176.83,1103.5,1008.5,1347.5,922.67,671.17,952.67,1342.33,679.33,547.67,627.67,824.83,945.5,1135.83,1628.83,1900.6,806.33,566,1844.17,1723.5,1400.5,1218.83,912.17,1716.33,602,546.83,757.67,921,1977.33,1912.83,1037.5,1248.83,1431.5,1641,1816.67,1160.17,676.33,542.33,740.17,1105.33,1389.33,1695.67,821.67,563.67,666,900.67,1865,1596.33,1463.83,1224,1062.17,1221.33,1044,1044.5,977.17,1240.83,608.67,596.83,868.5,1157.67,1369.33,1516.5,1860.33,1959.4,698.33,617.83]

""" 455 de la plaque AxhVLA250122-18 FROID """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [1313.83,1092.67,968.00,1043.17,1334.83,3394.67,2470.67,3206.17,3621.67,3456.00,1191.67,1123.80,1148.00,1185.00,1020.17,989.50,1061.17,3588.60,3609.00,3076.33,2194.50,1320.17,1014.50,974.83,1881.17,3107.60,3578.83,3600.50,1056.40,967.17,1098.00,1365.00,1518.83,3480.83,1905.50,2549.80,3601.17,3504.83,3579.33,3317.50,2845.33,2142.17,1706.67,1161.33,972.50,1118.60,3614.00,3435.67,1235.33,975.00,1108.67,1523.33,2046.20,2915.83,2995.80,3319.60,3579.50,3594.50,1177.50,1104.83,1213.17,1294.83,1059.83,966.33,989.00,3458.50,3581.80,3323.50,2400.83,1439.00,1115.17,958.00,1802.83,2844.17,3521.50,3569.00,1021.67,955.50,1186.00,1497.00,1550.00,3432.00,2113.50,2635.67,3547.17,3496.20,3416.67,2837.33,2221.83,1613.40,1152.00,974.33,999.60,1225.00,3581.67,3350.60]

""" 455 de la plaque AxhVLA250122-18 T MOY 1 """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [1133.33,941.33,833.67,872.67,1108.67,2934.83,2107.20,2718.67,3096.17,2977.50,1033.33,971.50,964.80,1010.33,857.00,843.67,927.33,3084.83,3079.50,2585.20,1818.00,1095.00,851.00,837.50,1564.67,2607.17,3051.33,3101.80,910.67,816.83,914.17,1110.33,1249.60,3010.33,1602.17,2174.80,3082.67,3026.17,3063.33,2806.67,2372.33,1764.50,1401.67,966.83,843.50,975.00,3101.17,2933.67,1060.83,827.67,907.33,1260.60,1694.50,2560.83,2516.50,2812.50,3069.67,3091.20,1026.00,948.00,1011.60,1084.17,884.83,817.33,851.00,2993.33,3086.67,2819.33,2008.17,1188.17,940.00,822.17,1510.00,2404.33,3012.00,3084.17,880.50,817.83,981.33,1239.67,1288.67,2977.00,1767.67,2203.33,3046.00,3028.83,2920.50,2401.83,1863.83,1350.00,953.67,822.00,853.67,1057.20,3075.17,2854.00]

""" 455 de la plaque AxhVLA250122-18 T MOY 2 """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [953.50,786.00,693.00,736.67,934.33,2458.33,1779.33,2288.83,2594.67,2487.67,878.67,814.67,800.00,840.00,714.33,709.67,774.33,2584.67,2578.17,2159.33,1511.17,908.17,704.17,701.17,1309.33,2188.60,2567.20,2590.50,763.40,688.67,768.33,934.50,1044.33,2524.67,1323.20,1808.50,2590.83,2545.17,2563.67,2353.00,1998.33,1492.83,1184.17,810.80,702.33,820.17,2602.33,2453.80,902.17,696.80,773.17,1056.20,1434.20,2155.50,2116.67,2363.83,2573.17,2589.00,856.40,802.00,846.17,898.83,749.67,691.33,712.50,2510.80,2589.67,2374.33,1700.20,1013.00,793.50,692.80,1253.17,2019.17,2530.67,2591.00,740.17,686.17,837.17,1055.00,1083.83,2508.50,1495.00,1859.00,2561.00,2547.00,2446.33,2018.33,1570.00,1125.33,818.40,693.83,721.60,884.33,2587.50,2396.50]

""" 455 de la plaque AxhVLA250122-18 CHAUD """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [815.33,668.33,586.33,604.67,730.17,2095.00,1405.50,1875.83,2152.00,2101.17,779.17,722.80,654.00,668.83,584.83,617.67,699.33,2184.50,2148.67,1749.00,1186.50,728.40,588.67,600.33,1067.00,1741.67,2120.50,2192.17,690.00,585.67,606.67,708.83,801.40,2161.33,997.33,1431.83,2179.67,2183.67,2150.50,1911.80,1587.67,1170.17,915.17,658.67,608.50,717.33,2189.67,2031.33,765.17,606.83,620.00,826.67,1100.33,1918.17,1722.67,1948.83,2172.17,2213.50,760.00,709.83,707.83,703.33,604.50,585.33,632.33,2180.50,2221.17,1967.83,1361.83,805.50,648.17,599.83,1040.33,1641.83,2124.33,2220.20,661.17,588.33,672.00,842.50,879.33,2185.83,1210.33,1526.60,2188.00,2230.20,2077.83,1665.83,1265.17,920.67,662.17,590.33,636.67,785.00,2214.00,2016.83]

""" 730 de la plaque AxhVLA250122-18 FROID """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [2618.00,2372.67,2088.00,1725.00,1409.83,1892.83,803.33,728.33,1129.00,1785.83,2482.17,2406.40,1572.40,1507.17,1762.33,2119.67,2305.33,1464.40,1072.00,717.00,915.50,1422.33,1793.67,2121.50,1057.33,719.20,994.00,1425.17,2299.80,1959.50,1624.67,1373.40,1253.17,1712.50,1042.67,782.80,1109.17,1640.33,1015.33,755.67,725.33,928.17,1136.83,1544.50,2109.83,2384.60,1205.67,816.17,2507.50,2083.83,1608.50,1246.33,966.40,2407.50,710.60,753.20,1064.50,1279.50,2454.00,2362.17,1479.00,1399.33,1660.00,1892.67,2133.33,1712.50,1344.60,760.83,826.33,1297.83,1587.67,2046.60,1074.00,720.50,931.00,1371.17,2232.00,1898.33,1500.83,1253.67,1215.00,1728.17,928.50,755.17,1023.83,1581.60,821.50,717.83,876.33,1167.80,1550.67,1846.67,2184.40,2489.00,1150.67,779.80]

""" 730 de la plaque AxhVLA250122-18 T MOY 1 """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [2386.17,2153.83,1903.00,1579.00,1298.50,1662.00,720.20,644.00,982.00,1583.00,2281.50,2189.17,1440.00,1387.50,1636.17,1957.50,2121.33,1274.67,918.00,638.20,843.83,1305.50,1640.00,1944.00,963.33,638.17,856.67,1222.40,2095.00,1813.50,1508.17,1281.33,1166.20,1496.50,955.17,715.20,962.67,1430.50,876.33,658.17,658.17,859.83,1060.83,1444.17,1946.67,2198.83,1062.33,721.50,2289.67,1915.67,1497.17,1160.00,899.67,2123.33,636.67,662.83,914.17,1108.80,2252.00,2163.67,1363.00,1304.33,1540.83,1751.17,1973.50,1502.83,1178.17,665.17,759.67,1206.17,1466.50,1880.00,985.60,651.67,808.50,1190.50,2048.83,1757.17,1397.17,1158.67,1124.00,1511.00,854.83,691.83,890.17,1369.00,720.67,646.83,807.17,1082.33,1431.50,1704.67,1997.67,2284.80,998.17,684.50]

""" 730 de la plaque AxhVLA250122-18 T MOY 2 """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [2077.17,1890.17,1653.20,1378.83,1133.17,1454.17,627.50,565.33,855.50,1396.17,2001.17,1921.50,1272.50,1214.17,1425.00,1710.00,1855.67,1111.33,803.50,559.33,745.50,1146.83,1446.17,1699.33,852.17,560.80,755.60,1073.67,1829.00,1576.67,1320.00,1114.00,1021.83,1310.50,843.00,628.17,839.17,1248.17,770.00,579.17,576.83,752.67,923.83,1252.80,1702.67,1925.83,921.17,627.80,2009.33,1670.80,1307.00,1012.80,775.80,1845.67,558.83,582.50,806.33,981.50,1975.00,1892.50,1196.50,1144.67,1340.50,1532.00,1733.50,1308.40,1023.83,584.17,664.80,1048.00,1288.17,1637.40,877.83,571.83,712.33,1041.80,1794.17,1536.17,1216.17,1014.60,989.17,1321.50,751.33,607.17,777.17,1207.67,624.83,568.83,706.83,956.17,1251.20,1494.83,1766.40,1999.67,871.67,597.67]

""" 730 de la plaque AxhVLA250122-18 CHAUD """
# mesures_RSB = np.asarray([57.1,61.9,69.7,77.9,85.7,160.1,105.7,119.8,139.9,154.1,59.8,61.4,79.5,80.7,77.1,69.9,65.2,151.6,141.5,122.2,103.8,90.2,79.4,69.9,94.4,117.2,136.1,148.9,66.3,75.7,84.4,90,93.9,155.7,99.7,108.7,139.5,153.8,137.2,124.9,115.2,102.5,98,84.3,72,63.2,143.1,130.1,57.8,68,79.5,89.4,100,171.4,119.1,127.7,140.3,146,60.7,62.4,83.3,83.7,79.5,74.1,67.8,156,147.5,127.4,107.6,89.8,82.1,71.5,93.8,113.2,134.6,147.2,66.1,74.1,85,91.2,91.9,156,101.5,110.3,137.4,152.1,128.8,113.9,102.7,91.9,81.8,75,65.9,58.4,141.2,127.2])
# donnees_experimentales = [1780.33,1610.83,1427.17,1192.83,997.83,1141.50,569.50,471.17,663.00,1131.00,1731.83,1676.00,1096.33,1079.17,1303.33,1516.00,1641.67,853.17,623.67,475.67,668.17,1008.20,1257.50,1473.83,742.17,476.50,577.83,811.17,1628.67,1411.67,1188.50,1033.50,935.60,1018.50,785.33,563.67,664.50,977.33,598.83,469.40,511.83,684.33,848.50,1104.33,1479.67,1663.17,712.83,502.83,1713.83,1475.67,1184.17,921.50,728.67,1478.17,481.67,474.17,626.50,752.83,1702.33,1648.83,1043.00,1056.50,1228.67,1376.83,1529.17,1025.83,798.50,476.67,593.83,940.17,1132.83,1437.83,767.33,501.00,553.67,805.20,1576.83,1365.33,1093.00,910.33,884.17,1038.50,669.83,533.00,615.67,904.00,510.67,497.17,644.50,847.83,1114.83,1313.50,1533.83,1737.17,680.17,488.17]

""" 455 de la plaque SCBG250423-11 """
# mesures_RSB = np.asarray([4,4,4,5,4,144,25.6,36.4,41.4,45.4,53.9,71.9,135.4,126.1,117.7,134.9,106.5,98.8,93.6,87.3,79.4,71.5,69.3,68,74.1,77.9,81.4,84.1,86.4,90.6,97.4,130.1,103,109.7,115.5,128.8,68.9,140.1,51.7,47.7,38.5,31.7,20.5,20,5,4,4,4,4,4,4,4,4,130.3,18.8,32.1,30.7,36.2,40.4,58.4,134,125.1,116.4,134.8,101.8,96.2,91.7,85.9,80.5,71.8,65.6,61,78.7,78.6,83.2,87.5,89,92.1,99.3,132,104.9,110.3,118.4,130.8,82.2,155.4,70.1,63.4,49.6,35.7,27.7,15.9,4,4,4,4])
# donnees_experimentales = ['nan','nan',2992.00,2981.00,2806.33,3154.20,2577.67,2047.80,1686.40,1607.83,1228.80,884.83,3056.67,2871.50,2594.17,3031.83,2072.17,1773.50,1451.67,1164.00,917.20,869.40,900.40,921.83,865.67,878.33,965.17,1035.00,1078.40,1277.80,1652.00,2938.17,1917.83,2209.40,2493.17,2926.50,899.60,3091.00,1442.83,1488.50,1923.67,2175.67,2751.60,2813.33,2974.50,'nan','nan','nan','nan','nan','nan','nan','nan',2940.67,2863.17,2258.67,2245.80,1986.50,1899.50,1117.17,2998.33,2779.83,2528.00,3009.83,1825.33,1554.33,1322.00,1081.17,915.20,860.50,955.20,1059.00,883.33,882.33,985.40,1131.33,1193.67,1356.80,1668.17,2948.33,1997.67,2245.33,2600.33,2901.60,968.33,3068.17,878.00,969.60,1499.00,2131.17,2517.17,2803.67,2939.40,2989.50,2989.00,'nan']

""" 455 de la plaque SCBG250423-20 """
# mesures_RSB = np.asarray([4,4,4,17.3,25.8,150.9,30.9,37.4,42.4,54.6,55,71.5,138.2,129,119.9,139.9,111,104,100.2,93.1,87.4,82.4,77.4,64.3,75.8,74.7,80.9,86.1,91,97.9,104.5,136.3,108.6,116.1,122.8,133.5,70.3,142.2,55.9,56.4,45,40.6,34.2,22.6,21.6,4,4,4,4,4,10.3,15.8,15.6,137.4,32.3,36.3,39.2,45.9,53.5,66,138.8,128.6,118.7,140.9,110.7,103.8,94.8,89.3,83.9,75.6,68.8,64.6,79.1,77.2,81.4,84.6,92.9,96.5,104.4,141.2,110.3,117.5,125.2,134.3,84.2,158.7,53.3,54.2,46.5,33.2,31,23.4,14.5,4,4,4])
# donnees_experimentales = [3486.00,'nan',3534.00,3409.67,3228.00,3667.33,2345.40,1723.83,1922.67,1737.00,1326.67,1024.60,3655.67,3463.40,3151.67,3661.67,2758.67,2362.17,2134.67,1694.33,1460.83,1233.67,1053.17,1089.83,1042.20,1016.00,1124.00,1342.67,1593.33,1963.00,2416.50,3599.50,2646.83,2993.17,3250.17,3533.83,1030.33,3663.50,1413.00,1413.50,1912.40,2288.67,2502.17,3222.00,3205.00,'nan','nan','nan','nan','nan',3479.83,3374.60,3406.60,3610.17,2569.50,2274.83,2077.20,1822.80,1480.33,1090.17,3608.50,3405.67,3062.00,3633.83,2737.40,2256.00,1790.50,1460.33,1255.83,1012.67,1036.67,1097.33,1016.00,1024.80,1192.83,1206.67,1631.67,1915.00,2284.17,3613.60,2657.17,3008.50,3286.50,3517.60,1083.00,3528.50,1237.17,1652.17,1741.00,2835.40,2530.33,3051.50,3309.17,'nan','nan','nan']

""" 730 de la plaque SCBG250423-11 """
# mesures_RSB = np.asarray([4,4,4,5,4,144,25.6,36.4,41.4,45.4,53.9,71.9,135.4,126.1,117.7,134.9,106.5,98.8,93.6,87.3,79.4,71.5,69.3,68,74.1,77.9,81.4,84.1,86.4,90.6,97.4,130.1,103,109.7,115.5,128.8,68.9,140.1,51.7,47.7,38.5,31.7,20.5,20,5,4,4,4,4,4,4,4,4,130.3,18.8,32.1,30.7,36.2,40.4,58.4,134,125.1,116.4,134.8,101.8,96.2,91.7,85.9,80.5,71.8,65.6,61,78.7,78.6,83.2,87.5,89,92.1,99.3,132,104.9,110.3,118.4,130.8,82.2,155.4,70.1,63.4,49.6,35.7,27.7,15.9,4,4,4,4])
# donnees_experimentales = ['nan','nan',3339.00,3330.33,3258.67,1081.80,3159.50,2922.80,2692.60,2678.50,2415.40,1712.67,823.33,708.33,688.00,802.33,815.83,937.33,1110.83,1318.17,1608.80,1883.40,1992.40,2049.33,1795.17,1706.50,1523.50,1439.33,1382.40,1217.40,992.17,733.17,867.33,764.20,697.33,726.50,1995.00,893.33,2534.50,2572.67,2824.00,2965.00,3200.20,3235.50,3320.33,'nan','nan','nan','nan','nan','nan','nan','nan',738.83,3243.33,2988.67,2992.60,2845.00,2803.17,2280.33,777.67,689.33,688.80,790.83,905.83,1038.00,1176.00,1367.67,1569.60,1847.00,2104.60,2218.40,1645.83,1648.50,1468.80,1321.00,1267.00,1150.00,974.33,747.33,827.33,742.67,677.33,723.60,1489.17,1299.50,1941.20,2110.40,2588.00,2907.67,3086.17,3235.00,3308.80,3311.75,3314.00,'nan']

""" 730 de la plaque SCBG250423-20 """
mesures_RSB = np.asarray(
    [4, 4, 4, 17.3, 25.8, 150.9, 30.9, 37.4, 42.4, 54.6, 55, 71.5, 138.2, 129, 119.9, 139.9, 111, 104, 100.2, 93.1,
     87.4, 82.4, 77.4, 64.3, 75.8, 74.7, 80.9, 86.1, 91, 97.9, 104.5, 136.3, 108.6, 116.1, 122.8, 133.5, 70.3, 142.2,
     55.9, 56.4, 45, 40.6, 34.2, 22.6, 21.6, 4, 4, 4, 4, 4, 10.3, 15.8, 15.6, 137.4, 32.3, 36.3, 39.2, 45.9, 53.5, 66,
     138.8, 128.6, 118.7, 140.9, 110.7, 103.8, 94.8, 89.3, 83.9, 75.6, 68.8, 64.6, 79.1, 77.2, 81.4, 84.6, 92.9, 96.5,
     104.4, 141.2, 110.3, 117.5, 125.2, 134.3, 84.2, 158.7, 53.3, 54.2, 46.5, 33.2, 31, 23.4, 14.5, 4, 4, 4])
donnees_experimentales = [3754.00, 'nan', 3773.25, 3714.33, 3636.67, 1475.50, 3259.20, 2899.67, 3001.67, 2921.80,
                          2602.67, 2031.20, 1008.00, 821.80, 764.83, 1027.17, 818.33, 936.17, 1023.67, 1246.17, 1398.33,
                          1588.17, 1838.83, 2288.67, 1856.40, 1970.00, 1705.67, 1489.17, 1304.33, 1095.00, 908.50,
                          923.33, 837.50, 765.67, 761.33, 865.00, 2129.17, 1085.17, 2607.60, 2615.17, 2927.00, 3108.67,
                          3273.67, 3562.20, 3580.80, 'nan', 'nan', 'nan', 'nan', 'nan', 3655.00, 3623.00, 3625.00,
                          954.67, 3258.17, 3127.00, 3015.80, 2870.60, 2662.67, 2271.83, 971.67, 793.00, 746.33, 1023.17,
                          799.20, 947.80, 1157.50, 1352.50, 1516.50, 1890.83, 2164.50, 2277.67, 1874.00, 1825.80,
                          1575.67, 1568.67, 1240.67, 1078.67, 924.00, 1001.60, 804.50, 745.00, 754.83, 857.00, 1691.20,
                          1586.33, 2434.00, 2766.50, 2809.40, 3346.00, 3228.50, 3427.00, 3549.17, 'nan', 'nan', 'nan']

indice_455 = np.linspace(1.3, 1.8, 51)
lambda_ = 730
coeff_normalisation = 1
n0 = 1
n2 = 3.65
# n2 = 4.55

d_e = []
for i in range(len(donnees_experimentales)):
    if donnees_experimentales[i] == 'nan':
        d_e.append(np.nan)
    else:
        d_e.append(float(donnees_experimentales[i]))
I_455 = np.asarray(d_e)

# # Configuration de la figure
fig, ax = plt.subplots()
ax.set_xlim(0, 200)
ax.set_ylim(0, 4000)
line, = ax.plot([], [], lw=2)

ax.scatter(mesures_RSB, I_455)


# Initialisation de la ligne
def init():
    line.set_data([], [])
    return line,


def reflectance(abscisse, n0, n1, n2, lambdaa):  # hypothèse faite ici : angle d'incidence = 0
    R01 = (n0 - n1) / (n0 + n1)
    R12 = (n1 - n2) / (n1 + n2)
    phi = (2 * np.pi * abscisse * n1) / lambdaa
    reflectance_abs = ((R01 ** 2) + (R12 ** 2) + 2 * R01 * R12 * np.cos(2 * phi)) / (
                1 + (R01 ** 2) * (R12 ** 2) + 2 * R01 * R12 * np.cos(2 * phi))
    reflectance_normalise = (reflectance_abs - np.min(reflectance_abs)) / (
                np.max(reflectance_abs) - np.min(reflectance_abs))
    return reflectance_normalise


def reflectance_NON_normalisee(abscisse, n0, n1, n2, lambdaa):  # hypothèse faite ici : angle d'incidence = 0
    R01 = (n0 - n1) / (n0 + n1)
    R12 = (n1 - n2) / (n1 + n2)
    phi = (2 * np.pi * abscisse * n1) / lambdaa
    reflectance_abs = ((R01 ** 2) + (R12 ** 2) + 2 * R01 * R12 * np.cos(2 * phi)) / (
                1 + (R01 ** 2) * (R12 ** 2) + 2 * R01 * R12 * np.cos(2 * phi))
    return reflectance_abs


# y = reflectance(np.linspace(0,200,401),1,indice_455[20],4.55,455)

# Fonction d'animation
def animate(i):
    x = np.linspace(0, 200, 401)
    # y = np.nanmin(I_455) + (np.nanmax(I_455)*coeff_normalisation - np.nanmin(I_455))*(1+np.cos(4*np.pi*x*indice_455[i]/lambda_))*0.5
    y = np.nanmin(I_455) + (np.nanmax(I_455) * coeff_normalisation - np.nanmin(I_455)) * reflectance(x, 1,
                                                                                                     indice_455[i], n2,
                                                                                                     lambda_)
    line.set_data(x, y)
    ax.set_title('SCBg250423-20 ZC22\nn7 = ' + str(indice_455[i]))
    return line,


# Création de l'animation
# ani = animation.FuncAnimation(fig, animate, init_func=init, frames=51, interval=300, blit=True)

# Sauvegarde de l'animation en fichier GIF
# ani.save('C:\\Users\\Admin\\Documents\\BG_455-11.gif', writer='pillow', fps=5)

plt.show()


def sinusoide(array, min_, max_, i):
    return min_ + (max_ - min_) * (1 + np.cos(4 * np.pi * array * indice_455[i] / lambda_)) * 0.5


rmse = []
for i in range(len(indice_455)):
    rmse.append(np.sqrt(
        np.nanmean((I_455 - sinusoide(mesures_RSB, np.nanmin(I_455), np.nanmax(I_455) * coeff_normalisation, i)) ** 2)))

# indice_min = np.argmin(rmse)
# n4 = indice_455(indice_min)

fig, bx = plt.subplots()
bx.set_xlim(0, 200)
bx.set_ylim(0, 4000)
line, = bx.plot([], [], lw=2)

bx.scatter(mesures_RSB, I_455)
indices_tries = np.argsort(mesures_RSB)
mesures_RSB_trie = mesures_RSB[indices_tries]
indice_a_teser = 21
# bx.plot(mesures_RSB_trie,sinusoide(mesures_RSB_trie,np.nanmin(I_455),np.nanmax(I_455)*coeff_normalisation,15))
bx.plot(mesures_RSB_trie,
        np.nanmin(I_455) + (np.nanmax(I_455) * coeff_normalisation - np.nanmin(I_455)) * reflectance(mesures_RSB_trie,
                                                                                                     1, indice_455[
                                                                                                         indice_a_teser],
                                                                                                     n2, lambda_))

plt.show()

puits_SCBG250423_20_a_30_degre = ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7',
                                  'G8', 'G9', 'G10', 'G11', 'G12', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9',
                                  'H10', 'H11', 'H12']

Imin4_29_ZC22 = 972
Imin7_29_ZC22 = 705
Imax4_29_ZC22 = 3895
Imax7_29_ZC22 = 3817
Imin4_30_ZC22 = 945
Imin7_30_ZC22 = 693
Imax4_30_ZC22 = 3776
Imax7_30_ZC22 = 3746

n1 = indice_455[indice_a_teser]

R01 = (n0 - n1) / (n0 + n1)
R12 = (n1 - n2) / (n1 + n2)

Rmax = ((R01 + R12) ** 2) / (1 + (R01 ** 2) * (R12 ** 2) + 2 * R01 * R12)
Rmin = ((R01 - R12) ** 2) / (1 + (R01 ** 2) * (R12 ** 2) - 2 * R01 * R12)

donnees_experimentales_normalisee = []
for lettre in range(len(lignes)):
    for chiffre in range(len(colonnes)):
        if donnees_experimentales[lettre * 12 + chiffre] == 'nan':
            donnees_experimentales_normalisee.append('nan')
        else:
            if lignes[lettre] + colonnes[chiffre] in puits_SCBG250423_20_a_30_degre:
                #     donnees_experimentales_normalisee.append((donnees_experimentales[lettre*12+chiffre]-Imin4_30_ZC22)/(Imax4_30_ZC22-Imin4_30_ZC22))
                # else:
                #     donnees_experimentales_normalisee.append((donnees_experimentales[lettre*12+chiffre]-Imin4_29_ZC22)/(Imax4_29_ZC22-Imin4_29_ZC22))
                donnees_experimentales_normalisee.append(
                    (donnees_experimentales[lettre * 12 + chiffre] - Imin7_30_ZC22) / (Imax7_30_ZC22 - Imin7_30_ZC22))
            else:
                donnees_experimentales_normalisee.append(
                    (donnees_experimentales[lettre * 12 + chiffre] - Imin7_29_ZC22) / (Imax7_29_ZC22 - Imin7_29_ZC22))

donnees_experimentales_reflectance_normalisee = []
for j in range(len(donnees_experimentales_normalisee)):
    if donnees_experimentales_normalisee[j] == 'nan':
        donnees_experimentales_reflectance_normalisee.append('nan')
    else:
        donnees_experimentales_reflectance_normalisee.append(
            Rmin + donnees_experimentales_normalisee[j] * (Rmax - Rmin))

plt.scatter(mesures_RSB, donnees_experimentales_reflectance_normalisee)
# plt.scatter(mesures_RSB, donnees_experimentales_normalisee)
plt.plot(mesures_RSB_trie, reflectance_NON_normalisee(mesures_RSB_trie, 1, indice_455[indice_a_teser], n2, lambda_))
plt.title('reflectance fitté')
plt.show()
